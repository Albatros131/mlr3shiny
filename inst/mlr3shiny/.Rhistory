lrn$train(task = tsk)
print(lrn$model)
lrn$param_set$values <- list(kernel = "linear", cost = 8, ) # cost (für classif)
lrn$param_set$values <- list(kernel = "linear") # cost (für classif)
lrn$train(task = tsk)
print(lrn$model)
tsk <- mlr_tasks$get("iris")
lrn <- mlr_learners$get("classif.svm")
lrn$param_set$values <- list(kernel = "linear") # cost (für classif)
lrn$param_set$get_values()
lrn$train(task = tsk)
print(lrn$model)
###svm
tsk <- mlr_tasks$get("mtcars")
lrn <- mlr_learners$get("regr.svm")
lrn$param_set$values <- list(kernel = "linear") # cost (für classif)
lrn$param_set$get_values()
lrn$train(task = tsk)
print(lrn$model)
lrn$param_set$values <- list(kernel = "linear", gamma = 1) # cost (für classif)
lrn$train(task = tsk)
print(lrn$model)
lrn$param_set$values <- list(kernel = "linear", gamma = 0.0001) # cost (für classif)
lrn$train(task = tsk)
print(lrn$model)
lrn$param_set$values <- list(kernel = "linear", gamma = 3) # cost (für classif)
lrn$train(task = tsk)
print(lrn$model)
lrn$param_set$values <- list(kernel = "linear", gamma = 20) # cost (für classif)
lrn$train(task = tsk)
print(lrn$model)
lrn$param_set$values <- list(kernel = "linear", gamma = 2) # cost (für classif)
lrn$param_set$get_values()
lrn$train(task = tsk)
print(lrn$model)
lrn$param_set$values <- list(kernel = "linear", gamma = 1.5) # cost (für classif)
lrn$train(task = tsk)
print(lrn$model)
lrn$param_set$values <- list(kernel = "linear", degree = 3) # cost (für classif); cost, (gamma)
lrn$train(task = tsk)
print(lrn$model)
lrn$param_set$values <- list(kernel = "linear", degree = 2) # cost (für classif); cost, (gamma)
lrn$train(task = tsk)
print(lrn$model)
pred <- lrn$predict(task = tsk)
lrn$param_set$values <- list(kernel = "linear", degree = 5) # cost (für classif); cost, (gamma)
lrn$train(task = tsk)
print(lrn$model)
rattle()
library(rattle)
rattle()
lrn$param_set$values <- list(kernel = "sigmoid")
lrn$train(task = tsk)
print(lrn$model)
lrn$param_set$values <- list(kernel = "sigmoid", cost = 3)
print(lrn$model)
###svm
tsk <- mlr_tasks$get("mtcars")
lrn <- mlr_learners$get("regr.svm")
lrn$param_set$values <- list(kernel = "sigmoid", cost = 3) # cost, gamma
lrn$param_set$get_values()
lrn$train(task = tsk)
print(lrn$model)
pred <- lrn$predict(task = tsk)
lrn$param_set$print()
lrn <- mlr_learners$get("classif.svm")
shiny::runApp('Drive/Studium Bachelor Hochschule Stralsund/Thesis/mlr3shiny')
lrn <- mlr_learners$get("classif.svm")
lrn$param_set$print()
lrn$param_set$params$kernel
lrn$param_set$params$kernel$levels
lrn$param_set$params$kernel$default
lrn <- mlr_learners$get("classif.svm")
lrn$param_set$print()
lrn$param_set$params$kernel$values
lrn$param_set$params$values
lrn$param_set$values <- list(kernel = "polynomial", cost = 5) # cost, degree, (coef.0), gamma (für classif); degree, gamma, cost, (coef0) für regr
lrn$param_set$params$values
lrn$param_set$values
lrn <- mlr_learners$get("classif.svm")
lrn$param_set$values
lrn$param_set$values <- list(kernel = "polynomial", cost = 5) # cost, degree, (coef.0), gamma (für classif); degree, gamma, cost, (coef0) für regr
lrn$param_set$get_values()
lrn <- mlr_learners$get("classif.svm")
lrn$param_set$get_values()
lrn$param_set$print()
lrn
test <- function(inp) {
if (inp ==1) {a <- 1}
else if (inp == 2) {a <- 2}
return(a)
}
test(1)
runApp('Drive/Studium Bachelor Hochschule Stralsund/Thesis/mlr3shiny')
runApp('Drive/Studium Bachelor Hochschule Stralsund/Thesis/mlr3shiny')
runApp('Drive/Studium Bachelor Hochschule Stralsund/Thesis/mlr3shiny')
runApp('Drive/Studium Bachelor Hochschule Stralsund/Thesis/mlr3shiny')
runApp('Drive/Studium Bachelor Hochschule Stralsund/Thesis/mlr3shiny')
learnerparams[["svm"]]
for (i in 1:length(learnerparams[["svm"]])) {
params[[i]] <- lrn$param_set$params[[learnerparams[["svm"]][i]]]
}
params <- list()
for (i in 1:length(learnerparams[["svm"]])) {
params[[i]] <- lrn$param_set$params[[learnerparams[["svm"]][i]]]
}
params
runApp('Drive/Studium Bachelor Hochschule Stralsund/Thesis/mlr3shiny')
runApp('Drive/Studium Bachelor Hochschule Stralsund/Thesis/mlr3shiny')
runApp('Drive/Studium Bachelor Hochschule Stralsund/Thesis/mlr3shiny')
shiny::runApp('Drive/Studium Bachelor Hochschule Stralsund/Thesis/mlr3shiny')
runApp()
runApp('Drive/Studium Bachelor Hochschule Stralsund/Thesis/mlr3shiny')
runApp('Drive/Studium Bachelor Hochschule Stralsund/Thesis/mlr3shiny')
runApp('Drive/Studium Bachelor Hochschule Stralsund/Thesis/mlr3shiny')
lrn <- mlr_learners$get("classif.svm")
lrn$param_set$get_values()
lrn$param_set$cost
lrn$param_set$params$cost
lrn$param_set$params$cost$class
is.numeric(lrn$param_set$params$cost$class)
str(lrn$param_set$params$cost$class)
lrn$param_set$print()
lrn$param_set$params$cost$class %in% c("ParamDbl", "ParamInt")
runApp('Drive/Studium Bachelor Hochschule Stralsund/Thesis/mlr3shiny')
runApp('Drive/Studium Bachelor Hochschule Stralsund/Thesis/mlr3shiny')
a <- NA
if (is.na(a))
if (is.na(a)) print("ok")
if (is.na(a) && b == 2) print("ok")
b <- NA
if (is.na(a) && b == 2) print("ok")
b <- NA
if (!is.na(b) && b == 2) print("ok")
a <- 1
b <- NA
if (!is.na(b) && b == 2) print("ok")
runApp('Drive/Studium Bachelor Hochschule Stralsund/Thesis/mlr3shiny')
runApp('Drive/Studium Bachelor Hochschule Stralsund/Thesis/mlr3shiny')
is.na(NULL)
runApp('Drive/Studium Bachelor Hochschule Stralsund/Thesis/mlr3shiny')
runApp('Drive/Studium Bachelor Hochschule Stralsund/Thesis/mlr3shiny')
runApp('Drive/Studium Bachelor Hochschule Stralsund/Thesis/mlr3shiny')
runApp('Drive/Studium Bachelor Hochschule Stralsund/Thesis/mlr3shiny')
lrn$param_set$cost$class %in% c("ParamDbl", "ParamInt")
lrn$param_set$cost$class
runApp('Drive/Studium Bachelor Hochschule Stralsund/Thesis/mlr3shiny')
lrn$param_set$params$degree$class %in% c("ParamDbl", "ParamInt")
lrn$param_set$params$degree$lower
lrn$param_set$params$degree$upper %in% c("ParamDbl", "ParamInt")
lrn$param_set$params$degree$upper
runApp('Drive/Studium Bachelor Hochschule Stralsund/Thesis/mlr3shiny')
lrn$param_set$print()
runApp('Drive/Studium Bachelor Hochschule Stralsund/Thesis/mlr3shiny')
runApp('Drive/Studium Bachelor Hochschule Stralsund/Thesis/mlr3shiny')
runApp('Drive/Studium Bachelor Hochschule Stralsund/Thesis/mlr3shiny')
runApp('Drive/Studium Bachelor Hochschule Stralsund/Thesis/mlr3shiny')
iinstall.packages("styler")
install.packages(styler)
install.packages("styler")
library(styler)
help("styler")
style_file(path = "/home/laurens/Drive/Studium Bachelor Hochschule Stralsund/Thesis/mlr3shiny/lokupstuff.R")
style_file(path = "/home/laurens/Drive/Studium Bachelor Hochschule Stralsund/Thesis/mlr3shiny/lookupstuff.R")
style_file(path = "/home/laurens/Drive/Studium Bachelor Hochschule Stralsund/Thesis/mlr3shiny/ui.R")
style_file(path = "/home/laurens/Drive/Studium Bachelor Hochschule Stralsund/Thesis/mlr3shiny/ui.R")
style_file(path = "/home/laurens/Drive/Studium Bachelor Hochschule Stralsund/Thesis/mlr3shiny/ui/ui_task.R")
style_file(path = "/home/laurens/Drive/Studium Bachelor Hochschule Stralsund/Thesis/mlr3shiny/ui/ui_tTsk.R")
style_file(path = "/home/laurens/Drive/Studium Bachelor Hochschule Stralsund/Thesis/mlr3shiny/ui/ui_Task.R")
style_file(path = "/home/laurens/Drive/Studium Bachelor Hochschule Stralsund/Thesis/mlr3shiny/ui/ui_Task.R")
style_file(path = "/home/laurens/Drive/Studium Bachelor Hochschule Stralsund/Thesis/mlr3shiny/ui/ui_Task.R")
style_file(path = "/home/laurens/Drive/Studium Bachelor Hochschule Stralsund/Thesis/mlr3shiny/ui/ui_Data.R")
style_file(path = "/home/laurens/Drive/Studium Bachelor Hochschule Stralsund/Thesis/mlr3shiny/ui.R", style = "mlr_style")
style_file(path = "/home/laurens/Drive/Studium Bachelor Hochschule Stralsund/Thesis/mlr3shiny/ui.R", style(mlr_style))
style_file(path = "/home/laurens/Drive/Studium Bachelor Hochschule Stralsund/Thesis/mlr3shiny/ui.R", style("mlr_style"))
style_file(path = "/home/laurens/Drive/Studium Bachelor Hochschule Stralsund/Thesis/mlr3shiny/ui.R", style("mlr_style"))
shiny::runApp('Drive/Studium Bachelor Hochschule Stralsund/Thesis/mlr3shiny')
runApp('Drive/Studium Bachelor Hochschule Stralsund/Thesis/mlr3shiny')
runApp('Drive/Studium Bachelor Hochschule Stralsund/Thesis/mlr3shiny')
shiny::runApp('Drive/Studium Bachelor Hochschule Stralsund/Thesis/mlr3shiny')
shiny::runApp('Drive/Studium Bachelor Hochschule Stralsund/Thesis/mlr3shiny')
.libPaths()
shiny::runApp('Drive/Studium Bachelor Hochschule Stralsund/Thesis/mlr3shiny')
library(tidy)
library(tidyr)
runApp('Drive/Studium Bachelor Hochschule Stralsund/Thesis/mlr3shiny')
runApp('Drive/Studium Bachelor Hochschule Stralsund/Thesis/mlr3shiny')
runApp('Drive/Studium Bachelor Hochschule Stralsund/Thesis/mlr3shiny')
shiny::runApp('Drive/Karriere/SHK/Shiny apps/App3_Wordcloud')
#------
# resampling
library(mlr3)
tres <- mlr_tasks$get("iris")
lres <- mlr_learners$get("classif.rpart")
resstrat <- mlr_resamplings$get("holdout")
resstrat$instantiate(task = tres)
resresult <- resample(task = tres, learner = lres, resampling = resstrat)
resresult$aggregate(measures = c("classif.ce", "classif.acc"))
shiny::runApp('Drive/Studium Bachelor Hochschule Stralsund/Thesis/mlr3shiny')
runApp('Drive/Studium Bachelor Hochschule Stralsund/Thesis/mlr3shiny')
#------
#benchmarking
task <- mlr_tasks$get("iris")
learn1 <- mlr_learners$get("classif.rpart")
learn2 <- mlr_learners$get("classif.svm")
lrns <- c("Learner1" = learn1, "Learner2" = learn2)
learn <- list("Learner1" = learn1, "Learner2" = learn2)
design <- expand_grid(tasks = task, learners = learn, resamplings = resstrat)
benchrest <- benchmark(design = design)
benchrest$aggregate(measures = "classif.acc")
test <- benchrest$aggregate(measures = c("classif.acc", "classif.ce"))
test
benchrest$best(measure = "classif.ce")
benchrest$best(measure = c("classif.ce", "classif.acc"))
best <- benchrest$best(measure = "classif.acc")
best$aggregate(measures = c("classif.ce", "classif.acc"))
runApp('Drive/Studium Bachelor Hochschule Stralsund/Thesis/mlr3shiny')
best <- benchrest$best(measure = "classif.acc")
best
best$aggregate(measures = c("classif.ce", "classif.acc"))
runApp('Drive/Studium Bachelor Hochschule Stralsund/Thesis/mlr3shiny')
runApp('Drive/Studium Bachelor Hochschule Stralsund/Thesis/mlr3shiny')
runApp('Drive/Studium Bachelor Hochschule Stralsund/Thesis/mlr3shiny')
View(errorAlertTrain)
runApp('Drive/Studium Bachelor Hochschule Stralsund/Thesis/mlr3shiny')
test
runApp('Drive/Studium Bachelor Hochschule Stralsund/Thesis/mlr3shiny')
runApp('Drive/Studium Bachelor Hochschule Stralsund/Thesis/mlr3shiny')
runApp('Drive/Studium Bachelor Hochschule Stralsund/Thesis/mlr3shiny')
View(errorAlertBenchGrid)
runApp('Drive/Studium Bachelor Hochschule Stralsund/Thesis/mlr3shiny')
runApp('Drive/Studium Bachelor Hochschule Stralsund/Thesis/mlr3shiny')
test <- c("classif.acc" "classif.ce" )
test <- c("classif.acc", "classif.ce" )
test[¹]
test[1]
runApp('Drive/Studium Bachelor Hochschule Stralsund/Thesis/mlr3shiny')
library(mlr3)
library(mlr3learners)
lrn <- mlr_learners$get("classif.ranger")
lrn
lrnreg <- mlr_learners$get("regr.ranger")
lrnreg
lrnreg <- mlr_learners$get("regr.rpart")
lrnreg
lrnreg <- mlr_learners$get("regr.svm")
lrnreg
lrnreg <- mlr_learners$get("regr.lm")
lrnreg
as.data.table(mlr_reflections$learner_predict_types)
lrnreg$predict_types
#------
# check for regression mit lineare/ logistische Regression, random forest, SVM, entscheidungsbaum
# target miles per gallon, measure mse
treg <- mlr_tasks$get(key = "mtcars")
# lineare Regression
llin <- mlr_learners$get("regr.lm")
llin$param_set$get_values()
llin$print()
llin$model
llin$train(task = treg, row_ids = treg_train)
treg_train <- sample(treg$row_ids, treg$nrow * 0.8)
treg_valid <- setdiff(treg$row_ids, treg_train)
# lineare Regression
llin <- mlr_learners$get("regr.lm")
llin$param_set$get_values()
llin$print()
llin$model
llin$train(task = treg, row_ids = treg_train)
llin$predict(task = treg, row_ids = treg_valid)
llin$predict_types
llin$predict_type <- "se"
llin$model
llin$train(task = treg, row_ids = treg_train)
llin$predict(task = treg, row_ids = treg_valid)
pred <- lbaum$predict(task = treg, row_ids = treg_valid)
#------
# check for regression mit lineare/ logistische Regression, random forest, SVM, entscheidungsbaum
# target miles per gallon, measure mse
treg <- mlr_tasks$get(key = "mtcars")
treg_train <- sample(treg$row_ids, treg$nrow * 0.8)
treg_valid <- setdiff(treg$row_ids, treg_train)
# entscheidungsbaum
lbaum <- mlr_learners$get(key = "regr.rpart")
lbaum$param_set$values <- list(cp = 0.02)
lbaum$predict_types
lbaum$train(task = treg, row_ids = treg_train)
pred <- lbaum$predict(task = treg, row_ids = treg_valid)
pred
pred$score(measures = "classif.acc")
pred$score(measures = "classif.auc")
pred$score(measures = "regr.mae")
as.data.frame.table(mlr_measures)
as.data.table(mlr_reflections$measure_properties)
mlr_measures$print()
mlr_measures$items
as.data.table(mlr_measures)
tres <- mlr_tasks$get("iris")
lres <- mlr_learners$get("classif.rpart")
resstrat <- mlr_resamplings$get("holdout")
tres <- read.csv("/home/laurens/Drive/Studium Bachelor Hochschule Stralsund/Thesis/examplefiles/GDaten.csv", sep = ";", header = TRUE, stringsAsFactors = TRUE)
tres <- mlr_tasks$get("iris")
lres <- mlr_learners$get("classif.rpart")
resstrat <- mlr_resamplings$get("holdout")
resresult <- resample(task = tres, learner = lres, resampling = resstrat)
resstrat <- mlr_resamplings$get("cv")
resresult <- resample(task = tres, learner = lres, resampling = resstrat)
resresult$print()
resresult$data
resresult$resampling
resresult$predictions
shiny::runApp('Drive/Studium Bachelor Hochschule Stralsund/Thesis/mlr3shiny')
library(mlr3)
library(mlr3learners)
#------
#benchmarking
task <- mlr_tasks$get("iris")
task$target_names
learn1 <- mlr_learners$get("classif.rpart")
learn2 <- mlr_learners$get("classif.svm")
lrns <- c("Learner1" = learn1, "Learner2" = learn2)
learn <- list("Learner1" = learn1, "Learner2" = learn2)
resstrat <- mlr_resamplings$get("cv")
design <- expand_grid(tasks = task, learners = learn, resamplings = resstrat)
benchrest <- benchmark(design = design)
benchrest$performance(ids = TRUE)
test <- benchrest$aggregate(measures = c("classif.acc", "classif.ce"))
test
benchrest$print()
shiny::runApp('RProjects/Reifegradmodell')
library(shiny)
library(shinyjs)
library(shinydashboard)
library(shinyWidgets)
library(shinyalert)
library(shinythemes)
runApp()
runApp('RProjects/Reifegradmodell')
library(dplyr)
runApp('RProjects/Reifegradmodell')
runApp('RProjects/Reifegradmodell')
runApp('RProjects/Reifegradmodell')
runApp('RProjects/Reifegradmodell')
#install.packages("shinyWidgets")
library(shinyWidgets)
shinyWidgets::shinyWidgetsGallery()
runApp('RProjects/Reifegradmodell')
runApp('RProjects/Reifegradmodell')
runApp()
runApp('RProjects/Reifegradmodell')
library(dplyr)
runApp('RProjects/Reifegradmodell')
runApp('RProjects/Reifegradmodell')
runApp('RProjects/Reifegradmodell')
length(dims[["Kundenerlebnis"]])
runApp('RProjects/Reifegradmodell')
runApp('RProjects/Reifegradmodell')
runApp('RProjects/Reifegradmodell')
shiny::runApp('RProjects/Reifegradmodell')
runApp('RProjects/Reifegradmodell')
runApp('RProjects/Reifegradmodell')
runApp('RProjects/Reifegradmodell')
runApp('RProjects/Reifegradmodell')
runApp('RProjects/Reifegradmodell')
runApp('RProjects/Reifegradmodell')
runApp('RProjects/Reifegradmodell')
runApp('RProjects/Reifegradmodell')
runApp('RProjects/Reifegradmodell')
if (interactive()) {
# Examples in the gallery :
shinyWidgets::shinyWidgetsGallery()
# Basic usage :
ui <- fluidPage(
switchInput(inputId = "somevalue"),
verbatimTextOutput("value")
)
server <- function(input, output) {
output$value <- renderPrint({ input$somevalue })
}
shinyApp(ui, server)
}
# }
runApp('RProjects/Reifegradmodell')
shinyWidgets::shinyWidgetsGallery()
shiny::runApp('RProjects/Reifegradmodell')
runApp('RProjects/Reifegradmodell')
mples in interactive R sessions
if (interactive()) {
# Examples in the gallery :
shinyWidgets::shinyWidgetsGallery()
# Basic usage :
ui <- fluidPage(
switchInput(inputId = "somevalue"),
verbatimTextOutput("value")
)
server <- function(input, output) {
output$value <- renderPrint({ input$somevalue })
}
shinyApp(ui, server)
}
## End(Not run)
if (interactive()) {
library(shiny)
library(shinyWidgets)
ui <- fluidPage(
tags$h1("Pretty switch update value"),
br(),
prettySwitch(inputId = "switch1", label = "Update me !"),
verbatimTextOutput(outputId = "res1"),
radioButtons(
inputId = "update", label = "Value to set:",
choices = c("FALSE", "TRUE")
)
)
server <- function(input, output, session) {
output$res1 <- renderPrint(input$switch1)
observeEvent(input$update, {
updatePrettySwitch(session = session, inputId = "switch1",
value = as.logical(input$update))
})
}
shinyApp(ui, server)
}
runApp('RProjects/Reifegradmodell')
runApp('RProjects/Reifegradmodell')
runApp('RProjects/Reifegradmodell')
runApp('RProjects/Reifegradmodell')
!FALSE
runApp('RProjects/Reifegradmodell')
togglers <- c("DimProduktinnovation", "DimStrategie", "DimOrganisation", "DimProzessdigitalisierung",
"DimZusammenarbeit", "DimInformationstechnologie", "DimKulturundExpertise", "DimTransformationsmanagement",
"Auswertung")
#       sliders[[i]] <- sliderTextInput(
#         inputId = paste0(currentselect, i), label = h5(dims[[currentselect]][i]), grid = FALSE, force_edges = TRUE,
#         choices = c("gar nicht",
#                     "wenig", "teilweise", "überwiegend", "völlig"),
#         selected = "teilweise")
#
#   }
#   isolate(unlist(reactiveValuesToList(input)[paste0(currentselect, length(dims[[currentselect]]))]))
#   return(sliders)
# }
togglers <- c("DimProduktinnovation", "DimStrategie", "DimOrganisation", "DimProzessdigitalisierung",
"DimZusammenarbeit", "DimInformationstechnologie", "DimKulturundExpertise", "DimTransformationsmanagement",
"Auswertung", "DimKundenerlebnis")
togglers(-"DimKundenerlebnis")
togglers[-"DimKundenerlebnis"]
togglers["DimKundenerlebnis"]
togglers[1]
togglers[which(togglers == "DimKundenerlebnis")]
togglers[-which(togglers == "DimKundenerlebnis")]
shiny::runApp('RProjects/Reifegradmodell')
runApp('RProjects/Reifegradmodell')
runApp('RProjects/Reifegradmodell')
runApp('RProjects/Reifegradmodell')
shiny::runApp('RProjects/Reifegradmodell')
## Annette Dobson (1990) "An Introduction to Generalized Linear Models".
## Page 9: Plant Weight Data.
ctl <- c(4.17,5.58,5.18,6.11,4.50,4.61,5.17,4.53,5.33,5.14)
trt <- c(4.81,4.17,4.41,3.59,5.87,3.83,6.03,4.89,4.32,4.69)
group <- gl(2, 10, 20, labels = c("Ctl","Trt"))
weight <- c(ctl, trt)
lm.D9 <- lm(weight ~ group)
lm.D9
library(mlr3learners)
library(mlr3)
test <- mlr_learners$get("classif.svm")
test$param_set$print()
shiny::runApp('Drive/Studium Bachelor Hochschule Stralsund/Thesis/mlr3shiny')
shiny::runApp('Drive/Studium Bachelor Hochschule Stralsund/Thesis/mlr3shiny')
shiny::runApp('Drive/Studium Bachelor Hochschule Stralsund/Thesis/mlr3shiny')
runApp('Drive/Studium Bachelor Hochschule Stralsund/Thesis/mlr3shiny')
runApp('Drive/Studium Bachelor Hochschule Stralsund/Thesis/mlr3shiny')
runApp('Drive/Studium Bachelor Hochschule Stralsund/Thesis/mlr3shiny')
runApp('Drive/Studium Bachelor Hochschule Stralsund/Thesis/mlr3shiny')
runApp('Drive/Studium Bachelor Hochschule Stralsund/Thesis/mlr3shiny')
runApp('Drive/Studium Bachelor Hochschule Stralsund/Thesis/mlr3shiny')
runApp('Drive/Studium Bachelor Hochschule Stralsund/Thesis/mlr3shiny')
runApp('Drive/Studium Bachelor Hochschule Stralsund/Thesis/mlr3shiny')
runApp('Drive/Studium Bachelor Hochschule Stralsund/Thesis/mlr3shiny')
runApp('Drive/Studium Bachelor Hochschule Stralsund/Thesis/mlr3shiny')
runApp('Drive/Studium Bachelor Hochschule Stralsund/Thesis/mlr3shiny')
runApp('Drive/Studium Bachelor Hochschule Stralsund/Thesis/mlr3shiny')
runApp('Drive/Studium Bachelor Hochschule Stralsund/Thesis/mlr3shiny')
runApp('Drive/Studium Bachelor Hochschule Stralsund/Thesis/mlr3shiny')
runApp('Drive/Studium Bachelor Hochschule Stralsund/Thesis/mlr3shiny')
runApp('Drive/Studium Bachelor Hochschule Stralsund/Thesis/mlr3shiny')
runApp('Drive/Studium Bachelor Hochschule Stralsund/Thesis/mlr3shiny')
runApp('Drive/Studium Bachelor Hochschule Stralsund/Thesis/mlr3shiny')
runApp('Drive/Studium Bachelor Hochschule Stralsund/Thesis/mlr3shiny')
shiny::runApp('Drive/Studium Bachelor Hochschule Stralsund/Thesis/mlr3shiny')
runApp('Drive/Studium Bachelor Hochschule Stralsund/Thesis/mlr3shiny')
runApp('Drive/Studium Bachelor Hochschule Stralsund/Thesis/mlr3shiny')
runApp('Drive/Studium Bachelor Hochschule Stralsund/Thesis/mlr3shiny')
runApp('Drive/Studium Bachelor Hochschule Stralsund/Thesis/mlr3shiny')
runApp('Drive/Studium Bachelor Hochschule Stralsund/Thesis/mlr3shiny')
runApp('Drive/Studium Bachelor Hochschule Stralsund/Thesis/mlr3shiny')
runApp('Drive/Studium Bachelor Hochschule Stralsund/Thesis/mlr3shiny')
install.packages(c(
"devtools", "roxygen2",
"testthat", "covr", "knitr"
))
setwd(dir = "/home/laurens/RProjects/mlr3shiny")
usethis::create_package("/home/laurens/RProjects/mlr3shiny")
usethis::create_package("/home/laurens/RProjects/mlr3shiny_pkg")
usethis::create_package("/home/laurens/RProjects/mlr3shinypkg")
devtools::load_all()
usethis::create_package("/home/laurens/RProjects/mlr3shinypkg")
shiny::runApp()
# library(shinycssloaders)
install.packages(mlr3learners)
install.packages("shinyWidgets")
